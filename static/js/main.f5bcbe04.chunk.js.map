{"version":3,"sources":["components/utilComps.js","components/CodeStatement.js","components/Plot.js","App.js","reportWebVitals.js","index.js"],"names":["Toggle","onSwitchOn","onSwitchOff","defaultVal","className","type","defaultChecked","onChange","e","target","checked","handleToggleChange","CodeStatement","coordinates","id","Plot","state","currCodeStatement","statementType","preamble","point","end","points","currFigure","figures","fig_0","componentDidUpdate","prevProps","theme","props","d3","attr","handleMouseOver","event","d","RADIUS","append","x","y","nodes","indexOf","xScale","yScale","text","handleMouseOut","remove","handleSvgClick","svg","circleAttrs","console","log","coords","newData","Math","round","invert","push","updateCodeStatement","selectAll","data","enter","cx","cy","r","fill","length","on","bounds","document","getElementById","getBoundingClientRect","svgDim","min","right","bottom","this","domain","range","xAxis","scale","yAxis","call","style","flex","padding","Component","App","width","setState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f5bcbe04.chunk.js","sourcesContent":["import React from 'react';\r\nimport './utilComps.css';\r\n\r\nexport const Toggle = ({ onSwitchOn, onSwitchOff, defaultVal=false }) => {\r\n    const handleToggleChange = (e) => {\r\n        if (e.target.checked) { onSwitchOn(); }\r\n        else { onSwitchOff(); }\r\n    }\r\n    \r\n    return (\r\n        <label className=\"switch\">\r\n            <input type=\"checkbox\" defaultChecked={defaultVal} onChange={(e) => handleToggleChange(e)} />\r\n            <span className=\"slider round\"></span>\r\n        </label>\r\n    )\r\n    \r\n}","import React from 'react'\r\n\r\nconst CodeStatement = ({ coordinates }) => {\r\n    return (\r\n        <div className=\"codefont\" id=\"code-output\">\r\n            {`\\\\usetikzlibrary{hobby} %excellent drawing algorithm`} <br />\r\n            {`\\\\begin{tikzpicture}`} <br />\r\n            {coordinates}\r\n            {`\\\\end{tikzpicture}`}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CodeStatement\r\n","import React, { Component } from 'react';\r\nimport * as d3 from 'd3'; \r\n\r\n// // Circles to mark points on canvas\r\n// const circleAttrs = {\r\n//     cx: (d) => xScale(d.x),\r\n//     cy: (d) => yScale(d.y),\r\n//     r: RADIUS,\r\n//     fill : \"rgb(50, 149, 237)\" // This gets updated a lot\r\n// };\r\n\r\n// Colors of the points on the canvas\r\nconst colors = [\"rgb(50, 149, 237)\", \r\n\"rgb(51, 88, 255)\",\r\n\"rgb(172, 18, 255)\", \r\n\"rgb(255, 0, 0)\",\r\n\"rgb(255, 144, 0)\",\r\n\"rgb(0, 196, 3)\", \r\n\"rgb(51, 204, 255)\",\r\n\"rgb(0, 102, 153)\",\r\n\"rgb(255, 0, 238)\",\r\n\"rgb(50, 149, 237)\", \r\n]\r\n\r\n\r\nconst AXIS_TOP_MARGIN = 10; \r\nconst AXIS_RIGHT_MARGIN = 10;\r\nconst AXIS_BOTTOM_MARGIN = 30; \r\nconst AXIS_LEFT_MARGIN = 30;\r\n\r\nconst RADIUS = 3;\r\n\r\n\r\n\r\nclass Plot extends Component {\r\n    state = {\r\n        currCodeStatement: {\r\n            statementType : \"\", // E.g., \"draw\"\r\n            preamble : \"\",       // E.g., \"\\draw plot ...\"\r\n            point : \"\",          // E.g., \"... (x_1, y_1), (x_2, y_2)...\"\r\n            end: \"\"              // E.g., \"... };\"\r\n        },\r\n        points: [], // Initialize set of all points on canvas\r\n        currFigure: 0, // Keeps track of which figure the user is editing\r\n        figures: { // \"figures\" maintains an object of arrays; each array is an (x,y) list of points which makes up a figure.\r\n            fig_0 : []\r\n        },\r\n    }\r\n    static xScale; \r\n    static yScale;\r\n\r\n    componentDidMount() {\r\n        const bounds = document.getElementById(\"plotWrapper\").getBoundingClientRect(); \r\n        const svgDim = Math.min(bounds.right, bounds.bottom) - 150;\r\n\r\n        // Setting x axis scale\r\n        this.xScale = d3.scaleLinear()\r\n                            .domain([0, 100]) // input values\r\n                            .range([0, svgDim-AXIS_LEFT_MARGIN-AXIS_RIGHT_MARGIN]); // [x,y] controls position of x-axis\r\n\r\n        this.yScale = d3.scaleLinear()\r\n                            .domain([0, 100])\r\n                            .range([svgDim-AXIS_TOP_MARGIN-AXIS_BOTTOM_MARGIN, 0]);  \r\n\r\n        // Setting axis\r\n        let xAxis = d3.axisBottom().scale(this.xScale);\r\n        let yAxis = d3.axisLeft().scale(this.yScale);\r\n\r\n        let circleAttrs = {\r\n            cx: (d) => this.xScale(d.x),\r\n            cy: (d) => this.yScale(d.y),\r\n            r: RADIUS,\r\n            fill : \"rgb(50, 149, 237)\" // This gets updated a lot\r\n        };\r\n\r\n        const svg = d3.select(\"#canvas\").append(\"svg\")\r\n                                .attr(\"width\", svgDim)\r\n                                .attr(\"height\", svgDim);\r\n        \r\n        svg.append(\"g\")\r\n                .attr(\"class\", `${this.props.theme}-axis`)\r\n                .attr(\"transform\", `translate(${[AXIS_LEFT_MARGIN, svgDim-AXIS_BOTTOM_MARGIN]})`)  //[x, y] controls position \r\n                .attr(\"id\", \"x-axis\")\r\n                .call(xAxis);\r\n        svg.append(\"g\")\r\n                .attr(\"class\", `${this.props.theme}-axis`)\r\n                .attr(\"transform\", `translate(${[AXIS_LEFT_MARGIN, AXIS_TOP_MARGIN]})`)\r\n                .attr(\"id\", \"y-axis\")\r\n                .call(yAxis);\r\n\r\n        svg.on(\"click\", (event) => this.handleSvgClick(event, svg, circleAttrs));\r\n    }\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n        if (prevProps.theme !== this.props.theme) {\r\n            d3.select(\"#x-axis\").attr(\"class\", `${this.props.theme}-axis`);\r\n            d3.select(\"#y-axis\").attr(\"class\", `${this.props.theme}-axis`);\r\n        }\r\n    }\r\n    \r\n    handleMouseOver = (event, d) => {  // Hovering enlarges the radius, prompts textbox\r\n        d3.select(event.target).attr(\"r\", RADIUS*2);\r\n    \r\n        // The textbox\r\n        d3.select(\"svg\").append(\"text\")\r\n            .attr(\"id\", `t${d.x}-${d.y}-${d3.select(\"svg\").nodes().indexOf(this)}`)\r\n            .attr(\"x\", () => this.xScale(d.x) - 30)\r\n            .attr(\"y\", () => this.yScale(d.y) - 15)\r\n            .attr(\"class\", `${this.props.theme}`)\r\n            .text(() => [d.x, d.y]); // Textbox data\r\n    }\r\n\r\n    handleMouseOut = (event, d) => {\r\n        d3.select(event.target).attr(\"r\", RADIUS);\r\n        // When we're done hovering, remove textbox\r\n        d3.select(`#t${d.x}-${d.y}-${d3.select(\"svg\").nodes().indexOf(this)}`).remove(); \r\n    }\r\n\r\n    handleSvgClick = (event, svg, circleAttrs) => {    \r\n        console.log('click');\r\n        if(this.state.currCodeStatement.preamble !== \"\"){\r\n            // Extract data of clicked point\r\n            let coords = d3.pointer(event);\r\n            let newData = {\r\n                x: Math.round(this.xScale.invert(coords[0])),  // Takes the pixel number to convert to number\r\n                y: Math.round(this.yScale.invert(coords[1]))\r\n            };\r\n\r\n            this.state.currCodeStatement.point = `(${newData.x/10}, ${newData.y/10}) `;\r\n            \r\n            // Draw point on the canvas\r\n            this.state.points.push(newData);\r\n            // this.state.figures[\"fig_\"+ String(this.state.currFigure)].push(newData); // adds point to the new figure\r\n            this.state.figures[`fig_${this.state.currFigure}`].push(newData); // adds point to the new figure\r\n            this.props.updateCodeStatement();\r\n            svg.selectAll(\"circle\") \r\n                .data(this.state.points)\r\n                .enter()\r\n                .append(\"circle\")\r\n                .attr(\"cx\", circleAttrs.cx)\r\n                .attr(\"cy\", circleAttrs.cy)\r\n                .attr(\"r\", circleAttrs.r)\r\n                .attr(\"fill\", circleAttrs.fill)\r\n                // .attr({id: \"c\" + \"-\" + \"fig_\" + String(this.state.currFigure) + \"-\" + String(this.state.figures[\"fig_\"+ String(this.state.currFigure)].length-1)})\r\n                .attr(\"id\", `c-fig_${this.state.currFigure}-${this.state.figures[`fig_${this.state.currFigure}`].length-1}`)\r\n                .on(\"mouseover\", this.handleMouseOver)\r\n                .on(\"mouseout\", this.handleMouseOut)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{flex: \"1\", padding: \"30px\"}} id=\"plotWrapper\">\r\n                {/* <svg width={100} height={100}>\r\n                <circle cx={4} cy={10} r={30} /> \r\n\r\n                </svg> */}\r\n\r\n                <div id=\"canvas\">\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default Plot;\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Toggle } from './components/utilComps';\nimport CodeStatement from './components/CodeStatement';\nimport Plot from './components/Plot';\n\nclass App extends Component {\n  state = {\n    theme: \"light\",\n    coordinates: [],\n  };\n\n  render() {\n    console.log(this.state);\n    return (\n      <div className={`App ${this.state.theme}`}>\n        <div id=\"text-heading\">\n            <div id=\"description\">Simple Canvas For Control Points\n                <p id=\"sub_description\">\n                Before you can draw, you need to select a code statement.\n                Select \"add <span className=\"codefont\">\\draw</span>\" to create a TikZ <span className=\"codefont\">\\draw</span> statement. \"add <span className=\"codefont\">\\node</span>\" works \n                similarly.\n                </p>\n            </div>\n        </div>\n        <div id=\"main-body-parent\">\n          <Plot \n            updateCodeStatement={() => {}} \n            theme={this.state.theme}\n          />\n          <div className=\"button-and-code\">\n            <div style={{width: \"100%\"}}>\n              {/* <AddDraw /> \n              <AddNode />\n              <Redraw /> */}\n              <div id=\"theme-selection\">\n                  <Toggle \n                    onSwitchOn={() => {this.setState({theme: 'dark'})}}\n                    onSwitchOff={() => {this.setState({theme: 'light'})}}\n                  />\n                  <p> Dark Mode </p>\n              </div>\n            </div>\n            <CodeStatement coordinates={this.state.coordinates} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}