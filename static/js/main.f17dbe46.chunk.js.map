{"version":3,"sources":["components/utilComps.js","components/CodeOutput.js","components/Plot.js","App.js","reportWebVitals.js","index.js"],"names":["Toggle","onSwitchOn","onSwitchOff","defaultVal","className","type","defaultChecked","onChange","e","target","checked","handleToggleChange","CmdButton","onClick","label","CodeStatement","codeStatements","currCodeStatement","console","log","length","formatPoints","points","map","x","y","join","id","cs","ind","style","color","colors","preamble","end","Plot","componentDidUpdate","prevProps","theme","props","d3","attr","handleMouseOver","event","d","RADIUS","append","nodes","indexOf","xScale","yScale","text","handleMouseOut","remove","handleSvgClick","svg","circleAttrs","coords","newData","Math","round","invert","updateCodeStatement","selectAll","onFigure","data","enter","cx","cy","r","figColor","on","this","initializeSvg","svgDim","xAxis","scale","yAxis","fill","AXIS_LEFT_MARGIN","AXIS_BOTTOM_MARGIN","call","AXIS_TOP_MARGIN","flex","padding","Component","INIT_CODE_STATEMENT","statementType","App","state","bounds","document","getElementById","getBoundingClientRect","min","right","bottom","domain","range","createCodeStatement","currPoints","i","updatedCodeStatements","push","setState","newPoint","updatedPoints","redoCurrentStatement","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f17dbe46.chunk.js","sourcesContent":["import React from 'react';\r\nimport './utilComps.css';\r\n\r\nexport const Toggle = ({ onSwitchOn, onSwitchOff, defaultVal=false }) => {\r\n    const handleToggleChange = (e) => {\r\n        if (e.target.checked) { onSwitchOn(); }\r\n        else { onSwitchOff(); }\r\n    }\r\n    \r\n    return (\r\n        <label className=\"switch\">\r\n            <input type=\"checkbox\" defaultChecked={defaultVal} onChange={(e) => handleToggleChange(e)} />\r\n            <span className=\"slider round\"></span>\r\n        </label>\r\n    );\r\n}\r\n\r\nexport const CmdButton = ({ onClick, label }) => {\r\n    return (\r\n        <button \r\n            type=\"button\"\r\n            className=\"cmd-buttons\"\r\n            onClick={onClick}\r\n        >\r\n            {label}\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\nimport { colors } from '../App';\r\n\r\nconst CodeStatement = ({ codeStatements, currCodeStatement }) => {\r\n    console.log(codeStatements.length);\r\n\r\n    const formatPoints = (points) => {\r\n        let coordPts = points.map(({x, y}) => `(${x/10},${y/10})`);\r\n        return coordPts.join(' ');\r\n    }\r\n    return (\r\n        <div className=\"codefont\" id=\"code-output\">\r\n            {`\\\\usetikzlibrary{hobby} %excellent drawing algorithm`} <br />\r\n            {`\\\\begin{tikzpicture}`} <br />\r\n            {/* previous code statements */}\r\n            {codeStatements.map((cs, ind) => (\r\n                <div style={{color: colors[ind]}} key={ind}>\r\n                    {`${cs.preamble} ${formatPoints(cs.points)} ${cs.end}`}\r\n                </div>\r\n            ))}\r\n            {/* curr code statement */}\r\n            <div style={{color: colors[codeStatements.length]}} key={codeStatements.length}>\r\n                {`${currCodeStatement.preamble} ${formatPoints(currCodeStatement.points)} ${currCodeStatement.end}`}\r\n            </div>\r\n            {`\\\\end{tikzpicture}`}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CodeStatement\r\n","import React, { Component } from 'react';\r\nimport * as d3 from 'd3'; \r\n\r\nimport { AXIS_TOP_MARGIN, AXIS_RIGHT_MARGIN, AXIS_BOTTOM_MARGIN, AXIS_LEFT_MARGIN } from '../App';\r\n\r\nconst RADIUS = 3;\r\n\r\nclass Plot extends Component {\r\n    static xScale;\r\n    static yScale;\r\n\r\n    componentDidMount() { \r\n        let { svg, svgDim, xScale, yScale } = this.props.initializeSvg();\r\n        this.xScale = xScale;\r\n        this.yScale = yScale;\r\n        // Setting axis\r\n        let xAxis = d3.axisBottom().scale(this.xScale);\r\n        let yAxis = d3.axisLeft().scale(this.yScale);\r\n\r\n        let circleAttrs = {\r\n            cx: (d) => this.xScale(d.x),\r\n            cy: (d) => this.yScale(d.y),\r\n            r: RADIUS,\r\n            fill : this.props.figColor // This gets updated a lot\r\n        };\r\n\r\n        svg.append(\"g\")\r\n                .attr(\"class\", `${this.props.theme}-axis`)\r\n                .attr(\"transform\", `translate(${[AXIS_LEFT_MARGIN, svgDim-AXIS_BOTTOM_MARGIN]})`)  //[x, y] controls position \r\n                .attr(\"id\", \"x-axis\")\r\n                .call(xAxis);\r\n        svg.append(\"g\")\r\n                .attr(\"class\", `${this.props.theme}-axis`)\r\n                .attr(\"transform\", `translate(${[AXIS_LEFT_MARGIN, AXIS_TOP_MARGIN]})`)\r\n                .attr(\"id\", \"y-axis\")\r\n                .call(yAxis);\r\n\r\n        svg.on(\"click\", (event) => this.handleSvgClick(event, svg, circleAttrs));\r\n    }\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n        if (prevProps.theme !== this.props.theme) {\r\n            d3.select(\"#x-axis\").attr(\"class\", `${this.props.theme}-axis`);\r\n            d3.select(\"#y-axis\").attr(\"class\", `${this.props.theme}-axis`);\r\n        }\r\n    }\r\n    \r\n    handleMouseOver = (event, d) => {  // Hovering enlarges the radius, prompts textbox\r\n        d3.select(event.target).attr(\"r\", RADIUS*2);\r\n    \r\n        // The textbox\r\n        d3.select(\"svg\").append(\"text\")\r\n            .attr(\"id\", `t${d.x}-${d.y}-${d3.select(\"svg\").nodes().indexOf(this)}`)\r\n            .attr(\"x\", () => this.xScale(d.x) - 30)\r\n            .attr(\"y\", () => this.yScale(d.y) - 15)\r\n            .attr(\"class\", `${this.props.theme}`)\r\n            .text(() => [d.x, d.y]); // Textbox data\r\n    }\r\n\r\n    handleMouseOut = (event, d) => {\r\n        d3.select(event.target).attr(\"r\", RADIUS);\r\n        // When we're done hovering, remove textbox\r\n        d3.select(`#t${d.x}-${d.y}-${d3.select(\"svg\").nodes().indexOf(this)}`).remove(); \r\n    }\r\n\r\n    handleSvgClick = (event, svg, circleAttrs) => {    \r\n        console.log('click');\r\n        if(this.props.currCodeStatement.preamble !== \"\"){\r\n            // Extract data of clicked point\r\n            let coords = d3.pointer(event);\r\n            let newData = {\r\n                x: Math.round(this.xScale.invert(coords[0])),  // Takes the pixel number to convert to number\r\n                y: Math.round(this.yScale.invert(coords[1]))\r\n            };\r\n            \r\n            // Draw point on the canvas\r\n            this.props.updateCodeStatement(newData);\r\n            svg.selectAll(`.circle-fig_${this.props.onFigure}`) \r\n                .data(this.props.currCodeStatement.points)\r\n                .enter()\r\n                .append(\"circle\")\r\n                .attr(\"cx\", circleAttrs.cx)\r\n                .attr(\"cy\", circleAttrs.cy)\r\n                .attr(\"r\", circleAttrs.r)\r\n                .attr(\"fill\", this.props.figColor)\r\n                .attr(\"class\", `circle-fig_${this.props.onFigure}`)\r\n                .on(\"mouseover\", this.handleMouseOver)\r\n                .on(\"mouseout\", this.handleMouseOut)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{flex: \"1\", padding: \"30px\"}} id=\"plotWrapper\">\r\n                <div id=\"canvas\" />\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default Plot;\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Toggle, CmdButton } from './components/utilComps';\nimport CodeStatement from './components/CodeOutput';\nimport Plot from './components/Plot';\n\nimport * as d3 from 'd3';\n\nexport const AXIS_TOP_MARGIN = 10; \nexport const AXIS_RIGHT_MARGIN = 10;\nexport const AXIS_BOTTOM_MARGIN = 30; \nexport const AXIS_LEFT_MARGIN = 30;\n// Colors of the points on the canvas\nexport const colors = [\n  \"rgb(50, 149, 237)\", \n  \"rgb(51, 88, 255)\",\n  \"rgb(172, 18, 255)\", \n  \"rgb(255, 0, 0)\",\n  \"rgb(255, 144, 0)\",\n  \"rgb(0, 196, 3)\", \n  \"rgb(51, 204, 255)\",\n  \"rgb(0, 102, 153)\",\n  \"rgb(255, 0, 238)\",\n  \"rgb(50, 149, 237)\", \n];\n\nconst INIT_CODE_STATEMENT = {\n  statementType : \"\", // E.g., \"draw\"\n  preamble : \"\",       // E.g., \"\\draw plot ...\"\n  points : [],          // E.g., \"[... (x_1, y_1), (x_2, y_2)...]\"\n  end: \"\"              // E.g., \"... };\"\n};\n\nclass App extends Component {\n  state = {\n    theme: \"light\",\n    codeStatements: [], // array [{ statementType, preamble, points, end }...]\n    currCodeStatement: INIT_CODE_STATEMENT,\n    onFigure: 0,\n  };\n  static xScale; \n  static yScale;\n\n  // pass as prop into Plot.js so xScale, yScale can be accessed at top level\n  initializeSvg = () => {\n    const bounds = document.getElementById(\"plotWrapper\").getBoundingClientRect(); \n    const svgDim = Math.min(bounds.right, bounds.bottom) - 150;\n\n    // Setting x axis scale\n    this.xScale = d3.scaleLinear()\n                        .domain([0, 100]) // input values\n                        .range([0, svgDim-AXIS_LEFT_MARGIN-AXIS_RIGHT_MARGIN]); // [x,y] controls position of x-axis\n\n    this.yScale = d3.scaleLinear()\n                        .domain([0, 100])\n                        .range([svgDim-AXIS_TOP_MARGIN-AXIS_BOTTOM_MARGIN, 0]);\n    \n    const svg = d3.select(\"#canvas\").append(\"svg\")\n                        .attr(\"width\", svgDim)\n                        .attr(\"height\", svgDim);\n    \n    return { svg, svgDim, xScale: this.xScale, yScale: this.yScale };\n  }\n\n  createCodeStatement = (statementType) => {\n    // First, we check if this is not the first figure the user has drawn.\n    if (this.state.currCodeStatement !== INIT_CODE_STATEMENT) {\n      // We check if the user just finished drawing something. If so, we draw lines between their points.\n      if(this.state.currCodeStatement.statementType == \"draw\"){\n          // Draw lines between points.\n          const currPoints = this.state.currCodeStatement.points;\n          for(let i = 0; i < currPoints.length; i++){ // Loop over (x,y) coordinates; connect a line from (x_i,y_i) to (x_{i+1}, y_{i+1}). \n              if(i == currPoints.length-1){\n                d3.select(\"svg\").append('line')\n                .style(\"stroke\", colors[this.state.onFigure])\n                .style(\"stroke-width\", 1)\n                .attr(\"x1\", this.xScale(currPoints[0].x))\n                .attr(\"y1\", this.yScale(currPoints[0].y))\n                .attr(\"x2\", this.xScale(currPoints[i].x))\n                .attr(\"y2\", this.yScale(currPoints[i].y));             \n              }\n              else{\n                d3.select(\"svg\").append('line')\n                .style(\"stroke\", colors[this.state.onFigure])\n                .style(\"stroke-width\", 1)\n                .attr(\"x1\", this.xScale(currPoints[i].x))\n                .attr(\"y1\", this.yScale(currPoints[i].y))\n                .attr(\"x2\", this.xScale(currPoints[i+1].x))\n                .attr(\"y2\", this.yScale(currPoints[i+1].y)); \n              }\n            }\n          }\n      // We update global variables now that we are on a different figure. \n      // save previous codeStatement into this.state.codeStatements\n      // reinitialize currCodeStatement \n      let updatedCodeStatements = [...this.state.codeStatements];\n      updatedCodeStatements.push(this.state.currCodeStatement);\n      this.setState({\n        codeStatements: updatedCodeStatements,\n        currCodeStatement: INIT_CODE_STATEMENT,\n        onFigure: this.state.onFigure+1 // Very important. Let's all other functions know that, from now on, we're moving onto a different drawing \n      }); \n    }\n    // Next, we work on setting up their new TikZ code.\n    // We update currCodeStatement, based on what type of statement the user wants.\n    if (statementType === \"draw\"){\n      this.setState({\n        currCodeStatement: {\n          statementType: \"draw\",\n          preamble: \"\\\\draw plot[closed hobby] coordinates { \\n\\n\\n\",\n          points: [],\n          end: \"};\\n\",\n        }\n      });\n    }\n    else if (statementType === \"node\"){\n      this.setState({\n        currCodeStatement: {\n          statementType: \"node\",\n          preamble: \"\\\\node at \",\n          points: [],\n          end: \"{};\\n\",\n        }\n      });\n    }\n  }\n\n  updateCodeStatement = (newPoint) => {\n    /* We update the TikZ code output (because the user clicked a new point). */\n    // append newPoint to currCodeStatement.points\n    let updatedPoints = [...this.state.currCodeStatement.points];\n    updatedPoints.push(newPoint);\n    this.setState({\n      currCodeStatement: {\n        ...this.state.currCodeStatement,\n        points: updatedPoints\n      }\n    });\n    console.log('updated points', this.state);\n  }\n\n  redoCurrentStatement = () => {\n    d3.select(\"svg\").selectAll(`.circle-fig_${this.state.onFigure}`).remove();\n    this.setState({\n      currCodeStatement: {\n        ...this.state.currCodeStatement,\n        points: [],\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className={`App ${this.state.theme}`}>\n        <div id=\"text-heading\">\n            <div id=\"description\">Simple Canvas For Control Points\n                <p id=\"sub_description\">\n                Before you can draw, you need to select a code statement.\n                Select \"add <span className=\"codefont\">\\draw</span>\" to create a TikZ <span className=\"codefont\">\\draw</span> statement. \"add <span className=\"codefont\">\\node</span>\" works \n                similarly.\n                </p>\n            </div>\n        </div>\n        <div id=\"main-body-parent\">\n          <Plot \n            initializeSvg={this.initializeSvg}\n            figColor={colors[this.state.onFigure]}\n            currCodeStatement={this.state.currCodeStatement}\n            updateCodeStatement={this.updateCodeStatement} \n            theme={this.state.theme}\n            onFigure={this.state.onFigure}\n          />\n          <div className=\"button-and-code\">\n            <div style={{width: \"100%\"}}>\n              <CmdButton onClick={() => this.createCodeStatement(\"draw\")} label={\"Add \\\\draw\"} /> \n              <CmdButton onClick={() => this.createCodeStatement(\"node\")} label={\"Add \\\\node\"} /> \n              <CmdButton onClick={this.redoCurrentStatement} label={\"Redo Current Statement\"} /> \n              <div id=\"theme-selection\">\n                  <Toggle \n                    onSwitchOn={() => {this.setState({theme: 'dark'})}}\n                    onSwitchOff={() => {this.setState({theme: 'light'})}}\n                  />\n                  <p> Dark Mode </p>\n              </div>\n            </div>\n            <CodeStatement \n              codeStatements={this.state.codeStatements} \n              currCodeStatement={this.state.currCodeStatement}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}